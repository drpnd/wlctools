#!/usr/bin/env expect -f

# Copyright (c) 2018 Hirochika Asai <asai@jar.jp>
# All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


set force_conservative 0  ;# set to 1 to force conservative mode even if
                          ;# script wasn't run conservatively originally
if {$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
        sleep .1
	exp_send -s -- $arg
    }
}

log_user 0


set env(TERM) vt100
set env(LINES) 30
set env(COLUMNS) 80

set timeout 10
spawn /bin/sh
match_max 100000

set HOST [lindex $argv 0]
set USER "$env(WLC_USER)"
set PASSWD "$env(WLC_PASSWD)"

expect {
 "$" {
  send -- "ssh -o StrictHostKeyChecking=no $HOST\r"
 }
 timeout {
  send -- "exit\r"
  exit
 }
}
expect {
 "*User: " {
  send -- "$USER\r"
 }
 timeout {
  exit
 }
}
expect {
 "*Password:" {
  send -- "$PASSWD\r"
 }
 timeout {
  exit
 }
}
expect {
 "*>" {
     send -- "config paging disable\r"
 }
 timeout {
  exit
 }
}

expect {
 "*>" {
     send -- "show wlan summary\r"
 }
 timeout {
  exit
 }
}
expect {
 "*>" {
   ## Set the output of the command
   set result $expect_out(0,string)
 }
 timeout {
  exit
 }
}
foreach x [split $result "\n"] {
 set found [regexp {([0-9]+)\s+([^\s]+)\s+/\s+([^\s]+).*} $x match wid wprofile wssid]
 if {$found == 1} {
  set ary($wid) $wssid
 }
}
#parray ary
send -- "\r"

expect {
 "*>" {
     send -- "show ap summary\r"
 }
 timeout {
  exit
 }
}
expect {
 "*>" {
   ## Set the output of the command
   set result $expect_out(0,string)
 }
 timeout {
  exit
 }
}
foreach x [split $result "\n"] {
 set found [regexp {([^\s]+)\s+\d+\s+AIR-.*} $x match apname]
 if {$found == 1} {
  lappend aps $apname
 }
}
send -- "\r"

foreach apname $aps {
 expect {
  "*>" {
      send -- "show ap wlan 802.11a $apname\r"
  }
  timeout {
   exit
  }
 }
 expect {
  "*>" {
    ## Set the output of the command
    set result $expect_out(0,string)
  }
  timeout {
   exit
  }
 }
 foreach x [split $result "\n"] {
  set found [regexp {([0-9]+)\s+([^\s]+)\s+([^\s]+).*} $x match wid wname bssid]
  if {$found == 1} {
   #set ary($wid) $wname
   puts "$apname 5GHz $wname $bssid"
  }
 }
 send -- "\r"
}
foreach apname $aps {
 expect {
  "*>" {
      send -- "show ap wlan 802.11b $apname\r"
  }
  timeout {
   exit
  }
 }
 expect {
  "*>" {
    ## Set the output of the command
    set result $expect_out(0,string)
  }
  timeout {
   exit
  }
 }
 foreach x [split $result "\n"] {
  set found [regexp {([0-9]+)\s+([^\s]+)\s+([^\s]+).*} $x match wid wname bssid]
  if {$found == 1} {
   #set ary($wid) $wname
   puts "$apname 2.4GHz $wname $bssid"
  }
 }
}

# Local variables:
# tab-width: 4
# c-basic-offset: 4
# End:
# vim600: sw=4 ts=4 fdm=marker
# vim<600: sw=4 ts=4
